// Code generated by MockGen. DO NOT EDIT.
// Source: internal/module/agent/service/tenant_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/module/agent/service/tenant_service.go -destination=internal/module/agent/service/tenant_service_mock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	"github.com/DODOEX/web3rpcproxy/internal/common"
	gomock "go.uber.org/mock/gomock"
)

// MockTenantService is a mock of TenantService interface.
type MockTenantService struct {
	ctrl     *gomock.Controller
	recorder *MockTenantServiceMockRecorder
}

// MockTenantServiceMockRecorder is the mock recorder for MockTenantService.
type MockTenantServiceMockRecorder struct {
	mock *MockTenantService
}

// NewMockTenantService creates a new mock instance.
func NewMockTenantService(ctrl *gomock.Controller) *MockTenantService {
	mock := &MockTenantService{ctrl: ctrl}
	mock.recorder = &MockTenantServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantService) EXPECT() *MockTenantServiceMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockTenantService) Access(token, bucket string) (*common.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access", token, bucket)
	ret0, _ := ret[0].(*common.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Access indicates an expected call of Access.
func (mr *MockTenantServiceMockRecorder) Access(token, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockTenantService)(nil).Access), token, bucket)
}

// Compensate mocks base method.
func (m *MockTenantService) Compensate(app *common.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compensate", app)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compensate indicates an expected call of Compensate.
func (mr *MockTenantServiceMockRecorder) Compensate(app any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compensate", reflect.TypeOf((*MockTenantService)(nil).Compensate), app)
}

// Ensure mocks base method.
func (m *MockTenantService) Ensure(app *common.App, now int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ensure", app, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ensure indicates an expected call of Ensure.
func (mr *MockTenantServiceMockRecorder) Ensure(app, now any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ensure", reflect.TypeOf((*MockTenantService)(nil).Ensure), app, now)
}
